package pe060;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import numbers.Numbers;

class Work60 {

	private static Numbers num = new Numbers(false);
	private static ArrayList<Long> PRIMES = findPrimes(10000);
	
	private static ArrayList<Long> findPrimes(int t) {
		ArrayList<Long> l = new ArrayList<>();
		num.findPrimesLessThan(t);
		for (long i : num.primesList()) {
			if (i == 2) continue;
			l.add(i);
		}
		return l;
	}
	
	private static boolean check(List<Long> xs, long y) {
		for (long x : xs) {
			long t1 = x * ((int) (Math.pow(10, (int) Math.log10(y) + 1))) + y;
			if (!num.isPrime(t1)) return false;
//			if (!PRIMES.contains(t1)) return false;
			long t2 = y * ((int) (Math.pow(10, (int) Math.log10(x) + 1))) + x;
			if (!num.isPrime(t2)) return false;
//			if (!PRIMES.contains(t2)) return false;
		}
		return true;
	}

	private static ArrayList<Long> find(ArrayList<Long> fnd, int pos) {
		do {
			if (PRIMES.get(pos) >= 10000) {
				int ix = fnd.size() - 1;
				long o = fnd.remove(ix);
				pos = PRIMES.indexOf(o) + 1;
				continue;
			}
			if (check(fnd, PRIMES.get(pos))) {
				fnd.add(PRIMES.get(pos++));
				continue;
			}
			pos += 1;
		} while (fnd.size() < 5);
		return fnd;
	}
	
	public static Long doIt() {
		long ans = 0;
		ArrayList<Long> l = new ArrayList<>();
		ArrayList<Long> f = find(l, 0);
		System.out.println(f);
		for (long i : f) ans += i;
		return ans;
	}
}
